// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // pooled (pgBouncer) — corresponde ao Vercel
  url       = env("POSTGRES_POSTGRES_PRISMA_URL")
  // ligação direta — corresponde ao Vercel (migracoes/Studio)
  directUrl = env("POSTGRES_POSTGRES_URL_NON_POOLING")
}

/**
 * =========================================================
 * =============== Auth / Users ============================
 * =========================================================
 */
model User {
  id            String    @id @default(cuid())
  name          String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  Cart     Cart[]

  // Back-relations
  orders  Order[]
  reviews Review[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
}

/**
 * =========================================================
 * =============== Store / Products ========================
 * =========================================================
 */
model Product {
  id          String  @id @default(cuid())
  slug        String  @unique
  name        String
  team        String
  season      String? // e.g. "25/26"
  basePrice   Int // cents
  description String? // texto livre por produto

  // Imagens hospedadas (ex.: Vercel Blob)
  imageUrls String[] @default([])

  // Badges selecionados (ex.: "ucl-winners", "premier-league-champions", etc.)
  badges String[] @default([])

  sizes      SizeStock[]
  options    OptionGroup[] @relation("ProductOptions")
  cartItems  CartItem[]
  orderItems OrderItem[]
  reviews    Review[] // back-relation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([team])
  @@index([season])
}

model SizeStock {
  id        String  @id @default(cuid())
  productId String
  size      String
  available Boolean @default(true) // sem número de stock; apenas disponibilidade on/off

  product Product @relation(fields: [productId], references: [id])

  @@unique([productId, size])
  @@index([productId])
}

model OptionGroup {
  id        String     @id @default(cuid())
  productId String
  key       String // "size", "customization", "shorts", "socks", "badges", ...
  label     String
  type      OptionType
  required  Boolean    @default(false)

  product Product       @relation("ProductOptions", fields: [productId], references: [id])
  values  OptionValue[]

  @@index([productId])
}

model OptionValue {
  id         String @id @default(cuid())
  groupId    String
  value      String
  label      String
  priceDelta Int    @default(0) // cents

  // Optional link to an official player (for team/player personalization)
  playerId     String?
  playerName   String?
  playerNumber Int?

  group  OptionGroup @relation(fields: [groupId], references: [id])
  player Player?     @relation(fields: [playerId], references: [id])

  @@index([groupId])
  @@index([playerId])
}

enum OptionType {
  SIZE
  RADIO
  ADDON
}

/**
 * =========================================================
 * =============== Players (official squad) =================
 * =========================================================
 */
model Player {
  id        String   @id @default(cuid())
  team      String // e.g., "Real Madrid"
  name      String
  number    Int
  position  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  optionValues OptionValue[]

  @@unique([team, name], name: "player_team_name")
  @@index([team])
}

/**
 * =========================================================
 * =============== Cart ====================================
 * =========================================================
 */
model Cart {
  id        String  @id @default(cuid())
  userId    String?
  user      User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  sessionId String? @unique // one cookie = one cart

  items CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model CartItem {
  id        String @id @default(cuid())
  cartId    String
  productId String

  qty        Int @default(1)
  unitPrice  Int // cents
  totalPrice Int @default(0)

  // snapshot of selected options
  optionsJson     Json?
  personalization Json?

  product Product @relation(fields: [productId], references: [id])
  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cartId])
  @@index([productId])
}

/**
 * =========================================================
 * =============== Orders / Fulfillment =====================
 * =========================================================
 */
enum OrderStatus {
  pending
  paid
  failed
  canceled
  refunded
  shipped
  delivered
}

model Order {
  id     String  @id @default(cuid())
  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  sessionId String?
  status    String  @default("pending") // mantido como String para compatibilidade
  currency  String  @default("eur")

  // Totais
  subtotal Int @default(0)
  shipping Int @default(0)
  tax      Int @default(0)

  // Alternativas (se usadas na app)
  total      Float?
  totalCents Int?

  // Stripe / PayPal
  stripeSessionId       String?
  stripePaymentIntentId String?
  paypalOrderId         String?
  paypalCaptured        Boolean?
  paypalCaptureId       String?

  // Payment bookkeeping
  paymentStatus String?
  paidAt        DateTime?

  // Shipping snapshot (legacy / fallback)
  shippingJson Json?

  // Canonical shipping columns (preferidas)
  shippingFullName   String?
  shippingEmail      String?
  shippingPhone      String?
  shippingAddress1   String?
  shippingAddress2   String?
  shippingCity       String?
  shippingRegion     String?
  shippingPostalCode String?
  shippingCountry    String?

  // Other
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  items OrderItem[]

  @@index([status])
  @@index([paymentStatus])
  @@index([createdAt])
  @@index([shippingCountry])
  @@index([paidAt])
}

model OrderItem {
  id           String  @id @default(cuid())
  orderId      String
  productId    String
  name         String
  image        String?
  qty          Int
  unitPrice    Int // cents
  totalPrice   Int // cents
  snapshotJson Json?

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

/**
 * =========================================================
 * =============== Engagement / Public Stats ================
 * =========================================================
 */
model Review {
  id        String   @id @default(cuid())
  userId    String?
  productId String?
  rating    Int // 1..5
  comment   String?
  createdAt DateTime @default(now())

  user    User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  product Product? @relation(fields: [productId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([productId])
  @@index([rating])
  @@index([createdAt])
}

model Subscriber {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model SocialMetric {
  id             String   @id @default(cuid())
  followersTotal Int
  createdAt      DateTime @default(now())

  @@index([createdAt])
}

model Visit {
  id        String   @id @default(cuid())
  visitorId String // anonymous id by cookie
  path      String
  referrer  String?
  ua        String?
  createdAt DateTime @default(now())

  @@index([createdAt])
  @@index([visitorId, createdAt])
}
